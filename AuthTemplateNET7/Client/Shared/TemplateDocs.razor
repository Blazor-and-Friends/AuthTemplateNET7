@{
    #if DEBUG
}

@using AuthTemplateNET7.Client.Bases
@using AuthTemplateNET7.Client.Components.DocsComponentObjs
@inherits FragmentNavigationBasePage

<Docs>
    <NavPaneItems>
        <NavItem Fragment="overview" />
        <NavItem Fragment="form-components" />
        <CollapsibleNavItem ButtonText="Form input components">
            <NavItem Fragment="form-input-components" />
        </CollapsibleNavItem>
        <CollapsibleNavItem ButtonText="Components">
            <NavItem Fragment="components" />
        </CollapsibleNavItem>
        <NavItem Fragment="additional-features" />
        <NavItem Fragment="extension-methods" />
        <NavItem Fragment="development-conveniences" />
        <NavItem Fragment="tips" />
        <NavItem Fragment="helpful-links" />
        <NavItem Fragment="authenticated-and-claims" />
    </NavPaneItems>

    <MainContent>

        <section id="overview">
            <h2>Overview</h2>
            <ul>
                <li>
                    Lightweight, HTTPOnly based cookie authentication/authorization.
                    <ul>
                        <li>
                            <a href="https://stackoverflow.com/a/56553965/2816057">Not using 3rd party libraries for password hashing</a>
                        </li>
                        <li>Includes roles</li>
                        <li>Whereas the MS "Individual Accounts" by default makes the Username the same as the email address, there is a <code>DisplayName</code> property on the Member that is filled out by the user.</li>
                        <li>Hey, i love Microsoft for giving my small-time ass access to the bulk of Visual Studio, to all the templates they provide free out of the box</li>
                        <li>And i don't fault any people for trying to make a buck</li>
                        <li>but when MS includes a paid dealy-mcbopper as part of their "invidual accounts" template that threatens to charge my small-time ass big bucks...</li>
                        <li>cursor-pointer on checkbox and radio input labels</li>
                    </ul>
                </li>
                <li>
                    A dynamic (meaning no matter how tall the content) footer that sticks to the bottom of the viewport on pages with too little content to fill the viewport.
                </li>
                <li>
                    A GDPR cookie consent component that re-confirms every 6 months by defaut, per suggested practice. (This can be changed in <code>Client.TemplateDocs.CookieConsent.MONTHS_BETWEEN_CONFIRMATIONS</code>.) In the <code>OnInitializedAsync()</code> method, there's an <code>#if DEBUG</code> that will pop up the cookie consent 8 hours after it was last seen so that you don't click it off, then forget about it, and end up pushing the default message to your production environment.
                </li>
                <li>
                    Bootstrap based
                    <ul>
                        <li>Bootstrap navbar</li>

                        <li><a href="@getAbsoluteUrlWithFragment("form-input-components")">Input components</a> that wrap inputs with Bootstrap as well as additional features.</li>

                    </ul>
                </li>
                <li>Light/dark theme switch that checks the user's system and sets the theme to the default theme on his device.</li>
            </ul>
        </section>

        <section id="form-components">
            <h2>Form components</h2>

            <ul>
                <li>Autofocuses first element. Good for phones so that the proper keyboard pops up</li>
            </ul>

            <section id="form-input-components" class="ms-3">
                <h3>Form input components</h3>
            </section>
        </section>

        <section id="components">
            <h2>Components</h2>
            <ul class="ms-3">
                <!--NotificationService-->
                <li>
                    <h3>NotificationService</h3>
                    <p>
                        The <code>NotificationService</code> is a <code>CascadingValue</code> wrapping the <code>@@Body</code> in <code>MainLayout.razor</code>.
                    </p>
                    <p>The advantage here is that any notices will persist across navigation events. For example, if you have an Add Product page that, after successfully adding a product, redirects to an All Products page, you can show a "Product successfully added" notice before you navigate and it will persist on the All Products page.</p>

                    <p>To use it on any page or in any component, add <code>[CascadingParameter] public NotificationService notificationService { get; set; }</code> to your code block.</p>

                    <p>It has two methods:</p>

                    <ul>
                        <li>
                            <code>Notify(string htmlMessage = "Success", BootstrapColor alertLevel = BootstrapColor.Success, int removeAfterSeconds = 6)</code> pops up a notice in the bottom left of the viewport.
                            <ul>
                                <li>
                                    <code>string htmlMessage</code> can be a string or any arbitrary HTML. <span class="fw-bold">NOTE:</span> If you include a link in the HTML, add the class "alert-link" to it. Also, if you have a heading tag (h1, h2, etc), add the class "alert-heading" to it.
                                </li>
                                <li>
                                    <code>BootstrapColor alertLevel</code>
                                    Sets the Bootstrap alert class for the notice
                                </li>
                                <li>
                                    See <a href="https://getbootstrap.com/docs/5.0/components/alerts/">Bootstrap alerts docs</a>
                                </li>
                            </ul>
                        </li>

                        <li>
                            <code>NotifyError(string htmlMessage, int removeAfterSeconds = int.MaxValue)</code> pops up a notice with "alert-danger" in the center of the viewport. Since the <code>removeAfterSeconds</code> is set to <code>int.MaxValue</code>, it won't fade and will need to be dismissed by the user.
                            </li>
                    </ul>

                    <p>
                        <span class="fw-bold">Design note: </span> Calling back and forth between <code>Notify</code> and <code>NotifyError</code> before notices have been removed will move the notifications container back and forth from bottom left to center. This is a bug by design to keep the code simple and I figure it's enough of an edge case that I don't care. If you do, the code's there for you to change it :)
                    </p>
                </li>

            </ul>
        </section>

        <section id="additional-features">
            <h2>Additional features</h2>

            <ul>
                <li>External links. <code>Anchor</code> tags that point to another website and which don't have their <code>target</code> attribute set get their <code>target</code> attribute set to <code>_blank</code> and have an external link icon appended, <a href="https://www.youtube.com/watch?v=kI4yoXyb1_M">like so</a>, or <a href="https://www.youtube.com/watch?v=8XkHsinz7oU">like so</a>. The call is from <code>Client.Shared.Mainlayout</code> which is executed in <code>Client.wwwroot.js.app.js.tf.setExternalLinks()</code>.</li>
            </ul>
        </section>

        <section id="extension-methods">
            <h2>Extension methods</h2>
            <ul>
                <li>
                    <code>.ToMarkupString(this string htmlString)</code> Renders raw HTML in a page/component
                </li>
                <li>
                    <code>ToJson(this object obj, bool writeIndented = false)</code> Serializes an object with <code>PropertyNameCaseInsensitive = true</code> and <code>ReferenceHandler = ReferenceHandler.IgnoreCycles</code> options by default. <code>writeIndented</code> will format the JSON.
                </li>
                <li>FromJson&lt;T>(this string json)</li> Instantiates a JSON object into Type T.
            </ul>
        </section>

        <section id="design-notes">
            <h2>Design notes</h2>

            <ul>
                <li>Keep it lean. For example, the <code>NotificationService</code> doesn't have options on where to place notifications--they're alway in the bottom left, with one exception. If you...</li>
                <li>Open Iconic is switched out with <a href="https://icons.getbootstrap.com/">Bootstrap Icons</a>. Not sure what's going on with Open Iconic, but the website that shows the class names is down. TODO deal with that tip down below.</li>
                <li>Any classes that are isolated (e.g. in <code>MyComponent.razor.css</code> are prefixed with "c-". It helps stop me, anyways, from hunting around in <code>app.css</code> looking for the class.</li>
            </ul>
        </section>

        <section id="development-conveniences">
            <h2>Development conveniences</h2>
            <ul>
                <li>Anything that should not be part of release is wrapped in a <code>#if DEBUG</code> compiler directive, including this component, so no unnecessary stuff will be compiled to the release folder</li>

                <li>Includes the <code>EntityFrameworkCore.InMemory</code> package, which is wrapped in <code>#if DEBUG</code> in <code>Server.Program.cs</code>. Place your real connection in the <code>#else</code> clause for production.</li>

                <!--Seeding members-->
                <li>
                    Seeds the DbContext with three Members from <code>Server.Program.cs</code>
                    <ul>
                        <li>
                            <span class="fw-bold">Frankie Dev</span> with Dev, Admin, Customer roles. When logged in as Dev, Dev and Admin dropdowns get added to the navbar

                        </li>
                        <li>
                            <span class="fw-bold">Barbara Admin</span> with Admin, Customer roles. An Admin dropdown gets added to the navbar
                        </li>
                        <li>
                            <span class="fw-bold">Alice Customer</span> with Customer role. When logged in, a profile page is exposed on the nabar.
                        </li>
                    </ul>
                </li>

                <li>
                    In development mode, the Login page automatically gets all Members along with their roles so you can quickly switch between Members and their respective Roles.
                </li>

                <li>
                    libman.json (make a vid about this).
                </li>

                <!--component folders-->
                <li> TODO
                    There are 4 folders for components, <code>Components</code>, <code>FormComponents</code>, <code>ImportsComponents</code>, and <code>TemplateComponents</code>. The thinking here is to not pollute your intellisense with components you don't need at the moment. <code>ImportsComponents</code> is included in <code>_Imports.razor</code>.
                </li>
            </ul>
        </section>

        <section id="tips">
            <h2>Tips</h2>
            <ul>
                <li>
                    To set up favicons for all devices, go to <a href="https://realfavicongenerator.net/">Favicon Generator</a>. You can also use that site to check any of your existing sites to see what can be improved.
                </li>
                <li>
                    Use the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode">inputmode</a> attribute for input types of <code>tel</code>, <code>email</code>, and <code>url</code>. By default the <code>NumberInput</code> component includes the <code>decimal</code> value. Additionally, the <code>FormFactory</code> component adds these attributes based on the property type and/or on any properties with a <code>DataType</code> attribute.
                </li>
            </ul>
        </section>

        <section id="helpful-links">
            <ul>
                <li><a href="https://icons.getbootstrap.com/#icons">Bootstrap icons</a> (scroll down a bit to see them)</li>

                <li><a href="https://github.com/dotnet/aspnetcore/tree/main/src/Components/Web/src/Forms">Blazor forms source code</a></li>

                <li><a href="https://github.com/dotnet/aspnetcore/blob/main/src/Components/Components/src/ComponentBase.cs">ComponentBase source code</a></li>

                <li><a href="https://getbootstrap.com/docs/5.0/forms">Bootstrap 5 form docs</a></li>

                <li><a href="https://youtu.be/lWu5zf_S9R4?t=410">Looking up aria- and role stuff for assistive tech</a></li>

                <li><a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/forms-and-input-components?view=aspnetcore-7.0#built-in-input-components">Blazor input types</a></li>

                <li><a href="https://www.w3schools.com/html/html_form_input_types.asp">HTML input types</a></li>

                <li><a href="https://httpstat.us/">super simple service for generating different HTTP codes</a></li>

                <li><a href="https://icons.getbootstrap.com/">Bootstrap icons</a></li>
                <li><a href="https://mockaroo.com/">mockaroo.com - mock up a data set</a></li>
            </ul>
        </section>

        <section id="authenticated-and-claims">
            <h2>Authentication status and claims</h2>
            <AuthorizeView>
                <Authorized>
                    You're logged in as @context.User.Identity.Name

                    <div class="fw-bold fst-italic">Claims:</div>
                    <ul>
                        @foreach (var item in context.User.Claims)
                        {
                            <li>
                                <span class="fw-bold">@item.Type:</span>
                                @item.Value
                            </li>
                        }
                    </ul>
                </Authorized>
                <NotAuthorized>
                    You do not have access to this resource.
                </NotAuthorized>
            </AuthorizeView>
        </section>
    </MainContent>
</Docs>

@{
    #endif
}
