@using AuthTemplateNET7.Client.FormComponents
@using AuthTemplateNET7.Shared.Dtos.Membership;
@inject HttpClient client_

<div aria-hidden="@ariaHidden"
     aria-labelledby="@modalTitleId"
     class="c-viewport-mask fade @showCss"
     role="alertdialog"
     style="z-index: @zIndex;"
     tabindex="-1">

    <div class="c-fixed-center-center" style="z-index: @((zIndex + 1).ToString());">

        <div class="modal-dialog">

            <div class="modal-content">

                <div class="modal-header">
                    <h5 id="@modalTitleId" class="modal-title fw-bold">
                        Verify password
                    </h5>
                    <button type="button"
                            @onclick="cancelButtonClicked"
                            class="btn-close"
                            aria-label="Close">
                    </button>
                </div>

                <div class="modal-body">
                    <EditFormWrapper
                        Model="verifyPasswordDto"
                        OnValidSubmit="validSubmit">

                        <PasswordInput
                            DisplayName="Password"
                            @bind-Value="verifyPasswordDto.Password"
                            Required="true"
                            ValidationFor="() => verifyPasswordDto.Password" />

                        <button type="button" @onclick="cancelButtonClicked" class="btn btn-outline-danger me-3">Cancel</button>
                    </EditFormWrapper>
                </div>

            </div>
        </div>


    </div>
</div>

@code {
    //added

    bool passwordVerifiedByServer = false;

    #if DEBUG

    VerifyPasswordDto verifyPasswordDto = new() { Password = "helloDollyHowYeBe1!" };

    #else

    VerifyPasswordDto verifyPasswordDto = new();

    #endif

    #region component stuff

    string ariaHidden = "true";
    string modalTitleId = StringHelpers.GenerateRandomString();
    [CascadingParameter] public NotificationService notificationService { get; set; }

    string showCss;
    bool waitingForResponse = true;
    int zIndex = -100;

    void cancelButtonClicked()
    {
        waitingForResponse = false;
    }

    async Task validSubmit()
    {
        var response = await client_.PostAsJsonAsync<VerifyPasswordDto>("api/membership/verify-password", verifyPasswordDto);

        if (response.IsSuccessStatusCode)
        {
            bool.TryParse(await response.Content.ReadAsStringAsync(), out passwordVerifiedByServer);

            waitingForResponse = false;
        }
        else
        {
            await notificationService.NotifyNonSuccessResponseAsync(response);
        }
    }

    #endregion //component stuff

    public async Task<bool> PasswordVerifiedAsync()
    {
        zIndex = 100;
        ariaHidden = "false";
        showCss = "show";
        StateHasChanged();

        while (waitingForResponse) await Task.Delay(100);

        ariaHidden = "true";
        showCss = null;
        StateHasChanged();
        await Task.Delay(100); //give fade time
        zIndex = -100;
        StateHasChanged();

        waitingForResponse = true; //reset if confirm gets called again

        return passwordVerifiedByServer;
    }
}
